// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies
// @generated from protobuf file "deathknight.proto" (package "proto", syntax proto3)
// tslint:disable
import { WireType } from '/wotlk/protobuf-ts/index.js';
import { UnknownFieldHandler } from '/wotlk/protobuf-ts/index.js';
import { reflectionMergePartial } from '/wotlk/protobuf-ts/index.js';
import { MESSAGE_TYPE } from '/wotlk/protobuf-ts/index.js';
import { MessageType } from '/wotlk/protobuf-ts/index.js';
/**
 * @generated from protobuf enum proto.DeathKnightMajorGlyph
 */
export var DeathKnightMajorGlyph;
(function (DeathKnightMajorGlyph) {
    /**
     * @generated from protobuf enum value: DeathKnightMajorGlyphNone = 0;
     */
    DeathKnightMajorGlyph[DeathKnightMajorGlyph["DeathKnightMajorGlyphNone"] = 0] = "DeathKnightMajorGlyphNone";
})(DeathKnightMajorGlyph || (DeathKnightMajorGlyph = {}));
/**
 * @generated from protobuf enum proto.DeathKnightMinorGlyph
 */
export var DeathKnightMinorGlyph;
(function (DeathKnightMinorGlyph) {
    /**
     * @generated from protobuf enum value: DeathKnightMinorGlyphNone = 0;
     */
    DeathKnightMinorGlyph[DeathKnightMinorGlyph["DeathKnightMinorGlyphNone"] = 0] = "DeathKnightMinorGlyphNone";
})(DeathKnightMinorGlyph || (DeathKnightMinorGlyph = {}));
// @generated message type with reflection information, may provide speed optimized methods
class DeathKnightTalents$Type extends MessageType {
    constructor() {
        super("proto.DeathKnightTalents", []);
    }
    create(value) {
        const message = {};
        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.DeathKnightTalents
 */
export const DeathKnightTalents = new DeathKnightTalents$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeathKnight$Type extends MessageType {
    constructor() {
        super("proto.DeathKnight", [
            { no: 1, name: "rotation", kind: "message", T: () => DeathKnight_Rotation },
            { no: 2, name: "talents", kind: "message", T: () => DeathKnightTalents },
            { no: 3, name: "options", kind: "message", T: () => DeathKnight_Options }
        ]);
    }
    create(value) {
        const message = {};
        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.DeathKnight.Rotation rotation */ 1:
                    message.rotation = DeathKnight_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);
                    break;
                case /* proto.DeathKnightTalents talents */ 2:
                    message.talents = DeathKnightTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);
                    break;
                case /* proto.DeathKnight.Options options */ 3:
                    message.options = DeathKnight_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* proto.DeathKnight.Rotation rotation = 1; */
        if (message.rotation)
            DeathKnight_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* proto.DeathKnightTalents talents = 2; */
        if (message.talents)
            DeathKnightTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* proto.DeathKnight.Options options = 3; */
        if (message.options)
            DeathKnight_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.DeathKnight
 */
export const DeathKnight = new DeathKnight$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeathKnight_Rotation$Type extends MessageType {
    constructor() {
        super("proto.DeathKnight.Rotation", []);
    }
    create(value) {
        const message = {};
        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.DeathKnight.Rotation
 */
export const DeathKnight_Rotation = new DeathKnight_Rotation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeathKnight_Options$Type extends MessageType {
    constructor() {
        super("proto.DeathKnight.Options", []);
    }
    create(value) {
        const message = {};
        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.DeathKnight.Options
 */
export const DeathKnight_Options = new DeathKnight_Options$Type();
